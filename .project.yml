project:
  name: "buildfab"
  modules: ["buildfab"]
  bin: "bin"

include:
  - "config/update-checking-stages.yml"
  - "config/update-checking-actions.yml"

stages:
  pre-push:
    steps:
      - action: version-check
      - action: version-greatest

      # Always run version module validation
      - action: version-module
      
      # Run tests after version module validation
      - action: run-tests
        require: [version-module]
      
      # Run Git checks for all versions      
      - action: git-untracked
      - action: git-uncommitted

      - action: git-modified
        onerror: warn

  build:
    steps:
      - action: pre-check
      - action: install-conan-deps
        require: [pre-check]
      - action: configure-cmake
        require: [install-conan-deps]
      - action: build-binaries
        require: [configure-cmake]
      - action: install-binary
        require: [build-binaries]
      - action: run-tests
        require: [install-binary]
      - action: create-installers
        require: [install-binary]
      - action: goreleaser-dry-run
        require: [create-installers, pre-check]

  test:
    steps:
      - action: build-cross-platform-binaries
      - action: check-binaries
        require: [build-cross-platform-binaries]
      - action: test-linux-ubuntu
        require: [check-binaries]
      - action: test-linux-debian
        require: [check-binaries]
      - action: test-windows
        require: [check-binaries]
      - action: test-macos
        require: [check-binaries]

  release:
    steps:
      - action: pre-check
      - action: install-conan-deps
        require: [pre-check]
      - action: configure-cmake
        require: [install-conan-deps]
      - action: build-all-platforms
        require: [configure-cmake]
      - action: install-binary
        require: [build-all-platforms]
      - action: run-tests
        require: [install-binary]
      - action: create-installers
        require: [install-binary]
      - action: goreleaser-release
        require: [create-installers, pre-check]

actions:
  # Version and validation actions
  - name: version-check
    run: scripts/version check

  - name: version-greatest
    run: scripts/version check-greatest

  - name: version-module
    run: |
      for module in $(scripts/version modules); do
        echo "Checking module: bin/$module"
        module_version=$(bin/$module -V 2>/dev/null || echo "")
        if [ -z "$module_version" ]; then
          echo "Could not get version from bin/$module -V"
          exit 1
        fi
        # Strip 'v' prefix from module version for comparison
        module_version_clean=$(echo "$module_version" | sed 's/^v//')
        # Get expected version directly from scripts/version
        expected_version=$(scripts/version version)
        if [ "$module_version_clean" != "$expected_version" ]; then
          echo "Version mismatch: bin/$module reports $module_version, expected $expected_version"
          echo "To check manually run: bin/$module -V"
          exit 1
        fi
        echo "✓ bin/$module version matches: $module_version"
      done

  - name: run-tests
    run: go test ./... -v -race

  # Git actions
  - name: git-untracked
    uses: git@untracked

  - name: git-uncommitted
    uses: git@uncommitted

  - name: git-modified
    uses: git@modified

  # Pre-check stage action
  - name: pre-check
    run: buildfab run pre-check

  # Dependency installation actions
  - name: install-conan-deps
    run: |
      # Check for golang package in Conan
      if ! conan search golang --remote=all 2>/dev/null | grep -q "golang/"; then
        echo "Creating golang package locally..."
        conan create conanfile-golang.py --build=missing
      fi
      conan install . --build=missing --profile=default

  # Build actions
  - name: configure-cmake
    run: |
      # Configure CMake with Conan preset
      mkdir -p .build
      # Try to use Conan preset first (CMake 3.23+)
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Using Conan CMake preset"
        cmake --preset conan-release
      else
        echo "Using manual CMake configuration"
        cmake -B .build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="/usr/local" -G "Unix Makefiles"
      fi

  - name: build-binaries
    run: |
      # Build for current platform
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Building with CMake preset"
        cmake --build --preset conan-release --target buildfab
      else
        echo "Building with manual configuration"
        cmake --build .build --target buildfab
      fi

  - name: install-binary
    run: |
      # Install binary to project bin directory using CMake
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Installing with CMake preset"
        cmake --build --preset conan-release --target install-current
      else
        echo "Installing with manual configuration"
        cmake --build .build --target install-current
      fi
      
      # Verify installation
      if [ -f "bin/buildfab" ]; then
        echo "✓ Binary installed successfully: bin/buildfab"
        bin/buildfab --version
      else
        echo "✗ Binary installation failed"
        exit 1
      fi

  - name: build-all-platforms
    run: |
      # Build for all platforms
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Building with CMake preset"
        cmake --build --preset conan-release --target buildfab-all
      else
        echo "Building with manual configuration"
        cmake --build .build --target buildfab-all
      fi

  - name: build-cross-platform-binaries
    run: |
      # Build cross-platform binaries for testing
      echo "Building cross-platform binaries for testing..."
      
      # Build Linux AMD64
      echo "Building Linux AMD64..."
      GOOS=linux GOARCH=amd64 go build -o bin/buildfab-linux-amd64 ./cmd/buildfab
      
      # Build Windows AMD64
      echo "Building Windows AMD64..."
      GOOS=windows GOARCH=amd64 go build -o bin/buildfab-windows-amd64.exe ./cmd/buildfab
      
      # Build macOS AMD64
      echo "Building macOS AMD64..."
      GOOS=darwin GOARCH=amd64 go build -o bin/buildfab-darwin-amd64 ./cmd/buildfab
      
      echo "✓ Cross-platform binaries built successfully"

  # Installer creation actions
  - name: create-installers
    run: |
      # Create install scripts
      ./buildtools/create-all-installers.sh "$(scripts/version version)" "installers"

  # GoReleaser actions
  - name: goreleaser-dry-run
    run: |
      export PATH="$(go env GOPATH)/bin:$PATH"
      goreleaser release --snapshot --skip-publish --clean

  - name: goreleaser-release
    run: |
      export PATH="$(go env GOPATH)/bin:$PATH"
      goreleaser release --clean

  # Binary checking actions
  - name: check-binaries
    run: |
      # Check if all required binaries exist in bin/ directory
      echo "Checking binaries in bin/ directory..."
      if [ -f "bin/buildfab" ]; then
        echo "✓ Main binary found: bin/buildfab"
        bin/buildfab --version
      else
        echo "✗ Main binary not found: bin/buildfab"
        exit 1
      fi
      
      # Check for cross-platform binaries if they exist
      for platform in linux-amd64 linux-arm64 darwin-amd64 darwin-arm64 windows-amd64; do
        if [ -f "bin/buildfab-${platform}" ] || [ -f "bin/buildfab-${platform}.exe" ]; then
          echo "✓ Cross-platform binary found: bin/buildfab-${platform}"
        fi
      done
      
      echo "✓ All required binaries are present"

  # Cross-platform testing actions - using buildfab parallel execution
  - name: test-linux-ubuntu
    run: |
      echo "Testing Linux Ubuntu 24.04 with container runtime..."
      
      # Detect container runtime (prefer podman over docker)
      if command -v podman >/dev/null 2>&1; then
        CONTAINER_RUNTIME="podman"
        echo "Using Podman (rootless)"
      elif command -v docker >/dev/null 2>&1; then
        CONTAINER_RUNTIME="docker"
        echo "Using Docker"
      else
        echo "❌ Neither podman nor docker found. Please install podman or docker."
        exit 1
      fi
      
      # Build container image for Ubuntu
      echo "Building Ubuntu container image..."
      $CONTAINER_RUNTIME build -f tests/cross-platform/Dockerfile.linux-ubuntu -t buildfab-test-ubuntu .
      
      # Run tests in Ubuntu container
      echo "Running Ubuntu tests..."
      $CONTAINER_RUNTIME run --rm buildfab-test-ubuntu
      echo "✅ Ubuntu tests completed"

  - name: test-linux-debian
    run: |
      echo "Testing Linux Debian 12 with container runtime..."
      
      # Detect container runtime (prefer podman over docker)
      if command -v podman >/dev/null 2>&1; then
        CONTAINER_RUNTIME="podman"
        echo "Using Podman (rootless)"
      elif command -v docker >/dev/null 2>&1; then
        CONTAINER_RUNTIME="docker"
        echo "Using Docker"
      else
        echo "❌ Neither podman nor docker found. Please install podman or docker."
        exit 1
      fi
      
      # Build container image for Debian
      echo "Building Debian container image..."
      $CONTAINER_RUNTIME build -f tests/cross-platform/Dockerfile.linux-debian -t buildfab-test-debian .
      
      # Run tests in Debian container
      echo "Running Debian tests..."
      $CONTAINER_RUNTIME run --rm buildfab-test-debian
      echo "✅ Debian tests completed"

  - name: test-windows
    run: |
      echo "Testing Windows (via Wine) with container runtime..."
      
      # Detect container runtime (prefer podman over docker)
      if command -v podman >/dev/null 2>&1; then
        CONTAINER_RUNTIME="podman"
        echo "Using Podman (rootless)"
      elif command -v docker >/dev/null 2>&1; then
        CONTAINER_RUNTIME="docker"
        echo "Using Docker"
      else
        echo "❌ Neither podman nor docker found. Please install podman or docker."
        exit 1
      fi
      
      # Build container image for Windows
      echo "Building Windows container image..."
      $CONTAINER_RUNTIME build -f tests/cross-platform/Dockerfile.windows -t buildfab-test-windows .
      
      # Run tests in Windows container
      echo "Running Windows tests..."
      $CONTAINER_RUNTIME run --rm buildfab-test-windows
      echo "✅ Windows tests completed"

  - name: test-macos
    run: |
      echo "Testing macOS platform detection..."
      echo "Note: Full macOS testing requires a macOS host or VM"
      
      # Check if we're on a macOS host using uname
      if [ "$(uname -s)" = "Darwin" ]; then
        # We're on macOS, test the binary directly
        if [ -f "bin/buildfab-darwin-amd64" ]; then
          echo "Testing macOS binary with platform detection..."
          if ./bin/buildfab-darwin-amd64 -c tests/cross-platform/macos_configuration.yml check-detection; then
            echo "✅ macOS platform detection test passed"
          else
            echo "❌ macOS platform detection test failed"
            exit 1
          fi
        else
          echo "⚠️ macOS binary not found, building it..."
          GOOS=darwin GOARCH=amd64 go build -o bin/buildfab-darwin-amd64 ./cmd/buildfab
          if ./bin/buildfab-darwin-amd64 -c tests/cross-platform/macos_configuration.yml check-detection; then
            echo "✅ macOS platform detection test passed"
          else
            echo "❌ macOS platform detection test failed"
            exit 1
          fi
        fi
      else
        # We're on Linux/Windows, skip macOS testing
        echo "⚠️ Skipping macOS test (not on macOS host - detected: $(uname -s))"
        echo "✅ macOS test skipped - requires macOS host"
      fi

